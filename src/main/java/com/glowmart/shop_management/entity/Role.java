package com.glowmart.shop_management.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;
import java.util.Set;

/**
 * Represents a role entity in the system.
 * <p>
 * This entity is used to store role details, including its unique identifier, name,
 * associated users, permissions, and timestamps for creation, updates, and deletion.
 * </p>
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
public class Role {

    /**
     * Unique identifier for the role.
     * <p>
     * This field is automatically generated by the database when a new role is created.
     * </p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long roleId;

    /**
     * The name of the role.
     * <p>
     * This field is required and should be unique across the system.
     * </p>
     */
    @Column(nullable = false)
    private String roleName;

    /**
     * The list of users assigned to this role.
     * <p>
     * This is a one-to-many relationship, meaning a role can have multiple users,
     * but a user can have only one role.
     * </p>
     */
    @OneToMany(mappedBy = "role", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<User> userLists;

    /**
     * The set of permissions associated with this role.
     * <p>
     * This is a many-to-many relationship, meaning a role can have multiple permissions,
     * and a permission can be associated with multiple roles.
     * </p>
     */
    @ManyToMany
    @JoinTable(
            name = "role_permission",
            joinColumns = @JoinColumn(name = "role_id"),
            inverseJoinColumns = @JoinColumn(name = "permission_id")
    )
    private Set<Permission> permissions;

    /**
     * Timestamp for when the role was created.
     * <p>
     * This field is automatically set when the role is created and cannot be updated.
     * </p>
     */
    @CreationTimestamp
    @Column(nullable = false, updatable = false, columnDefinition = "TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
    private LocalDateTime createdAt;

    /**
     * Timestamp for when the entity was last updated.
     * <p>
     * This field is optional and will be set when an update occurs.
     * If null, the entity has not been updated since its creation.
     * </p>
     */
    @Column(nullable = true, columnDefinition = "TIMESTAMP DEFAULT NULL")
    private LocalDateTime updatedAt;

    /**
     * Timestamp for when the role was deleted.
     * <p>
     * This field is used for soft deletion. If null, the role is active.
     * If set, it indicates when the role was marked as deleted.
     * </p>
     */
    @Column(nullable = true, updatable = false, columnDefinition = "TIMESTAMP DEFAULT NULL")
    private LocalDateTime deletedAt;
}
