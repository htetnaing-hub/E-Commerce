package com.glowmart.shop_management.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;
import java.util.Set;

/**
 * Represents a product in the shopping system.
 * <p>
 * This entity stores details about products available for purchase, including their name,
 * price, discount details, and timestamps for creation, updates, and deletion.
 * </p>
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Entity
public class Product {

    /**
     * Unique identifier for the product.
     * <p>
     * This field is automatically generated by the database when a new product is created.
     * </p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long productId;

    @Column(nullable = false)
    private String photoPath;

    /**
     * The user who added the product.
     * <p>
     * This field establishes a relationship between the product and the user who created it.
     * </p>
     */
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    @JsonIgnore
    private User user;

    /**
     * The category under which the product is listed.
     * <p>
     * This field links the product to a specific category.
     * </p>
     */
    @ManyToOne
    @JoinColumn(name = "category_id", nullable = false)
    @JsonIgnore
    private Category category;

    /**
     * The set of wishlists that contain this product.
     * <p>
     * This field represents a many-to-many relationship between products and wishlists.
     * A product can be added to multiple wishlists, and each wishlist can contain multiple products.
     * </p>
     */
//    @ManyToMany(mappedBy = "products")
//    private Set<WishList> wishLists;

    /**
     * The name of the product.
     * <p>
     * This field is required and has a maximum length of 50 characters.
     * </p>
     */
    @Column(nullable = false, length = 50)
    private String productName;

    /**
     * The actual price of the product before any discounts.
     * <p>
     * This value is required and defaults to 0 if not specified.
     * </p>
     */
    @Column(nullable = false, columnDefinition = "Double PRECISION DEFAULT 0")
    private Double productOriginalPrice;

    /**
     * A detailed description of the product.
     * <p>
     * This field is required and provides additional information about the product.
     * </p>
     */
    @Column(nullable = false)
    private String productDescription;

    /**
     * The discount amount applied to the product.
     * <p>
     * If no discount is provided, this value defaults to 0.
     * </p>
     */
    @Column(nullable = false, columnDefinition = "Double PRECISION DEFAULT 0")
    private Double productDiscountAmount;

    /**
     * Timestamp indicating when the product was created.
     * <p>
     * This field is automatically set when the product is created and cannot be updated.
     * </p>
     */
    @CreationTimestamp
    @Column(nullable = false, updatable = false, columnDefinition = "TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
    private LocalDateTime createdAt;

    /**
     * The username of the person who created the product.
     * <p>
     * This field is required and cannot be updated.
     * </p>
     */
    @Column(nullable = false, updatable = false)
    private String createdBy;

    /**
     * Timestamp indicating when the product was last updated.
     * <p>
     * This field is optional and is set when the product details are modified.
     * </p>
     */
    @Column(nullable = true, columnDefinition = "TIMESTAMP DEFAULT NULL")
    private LocalDateTime updatedAt;

    /**
     * The username of the person who last updated the product.
     * <p>
     * This field is optional and stores the last editor's username.
     * </p>
     */
    @Column(nullable = true)
    private String updatedBy;

    /**
     * Timestamp indicating when the product was deleted.
     * <p>
     * This field is optional and is set when the product is removed from the catalog.
     * </p>
     */
    @Column(nullable = true, columnDefinition = "TIMESTAMP DEFAULT NULL")
    private LocalDateTime deletedAt;

    /**
     * The username of the person who deleted the product.
     * <p>
     * This field is optional and stores the username of the person who performed the deletion.
     * </p>
     */
    @Column(nullable = true)
    private String deletedBy;

    /**
     * Indicates whether the product is active or inactive.
     * <p>
     * A value of {@code true} means the product is available for purchase,
     * while {@code false} means it is inactive.
     * </p>
     */
    @Column(nullable = false)
    private boolean active;

    /**
     * The final price of the product after applying discounts.
     * <p>
     * The default value of this column is 0.
     * </p>
     */
    @Column(nullable = false, columnDefinition = "Double PRECISION DEFAULT 0")
    private Double productFinalPrice;

    /**
     * The percentage of discount applied to the product.
     * <p>
     * This field defaults to 0 if no discount is provided.
     * </p>
     */
    @Column(nullable = false, columnDefinition = "INTEGER DEFAULT 0")
    private Double productDiscountPercentage = 0.0;

}
