package com.glowmart.shop_management.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;
import java.util.Set;

/**
 * Represents a user entity in the system.
 * <p>
 * This entity is used to store user details such as their id, role, name,
 * email, phone, password, and timestamps for creation, updating, login.
 * </p>
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Entity
@Table (name = "users")
public class User {

    /**
     * Unique identifier for the user.
     * <p>
     * This field is automatically generated by the database when a new user is created.
     * </p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long userId;

    /**
     * The role assigned to the user.
     * <p>
     * This is a many-to-one relationship, meaning a user can have one role, but a role can be
     * associated with multiple users.
     * </p>
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "role_id", nullable = false)
    @JsonIgnore
    private Role role;

    /**
     * The list of carts associated with this user.
     * <p>
     * This represents a one-to-many relationship where a user can have multiple carts.
     * When a user is deleted, all associated carts are also removed due to
     * {@code CascadeType.ALL} and {@code orphanRemoval = true}.
     * </p>
     */
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<Cart> cartList;

    /**
     * The username chosen by the user.
     * <p>
     * This field is not unique, and the user is required to provide a valid username.
     * </p>
     */
    @Column(unique = false, nullable = false)
    private String userName;

    /**
     * The email address of the user.
     * <p>
     * This field is unique and required. It must be a valid email format.
     * </p>
     */
    @Column(unique = true, nullable = false)
    private String userEmail;

    /**
     * The phone number of the user.
     * <p>
     * This field is unique and required.
     * </p>
     */
    @Column(unique = true, nullable = false)
    private String userPhone;

    /**
     * The password of the user.
     * <p>
     * This field is required and should be securely stored (e.g., hashed).
     * </p>
     */
    @Column(nullable = false)
    private String userPassword;

    /**
     * Timestamp for when the user account was created.
     * <p>
     * This field is automatically set when the user is created and cannot be updated.
     * </p>
     */
    @CreationTimestamp
    @Column(nullable = false, updatable = false, columnDefinition = "TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
    private LocalDateTime createdAt;

    /**
     * Timestamp for when the user account was last updated.
     * <p>
     * This field is optional and is set when the user entity is updated.
     * </p>
     */
    @Column(nullable = true, columnDefinition = "TIMESTAMP DEFAULT NULL")
    private LocalDateTime updatedAt;

    /**
     * Timestamp for the user's last login time.
     * <p>
     * This field is optional and is set when the user logs in.
     * </p>
     */
    @Column(nullable = true, columnDefinition = "TIMESTAMP DEFAULT NULL")
    private LocalDateTime lastLoginTime;
}
